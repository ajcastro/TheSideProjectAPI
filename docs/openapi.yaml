openapi: 3.0.3
info:
  title: 'The SideProject API'
  description: 'Start (and never finish) side projects with this API.'
  version: 1.0.0
servers:
  -
    url: 'http://sideprojects.knuckles.wtf'
paths:
  /api/healthcheck:
    get:
      summary: Healthcheck
      description: "Check that the service is up. If everything is okay, you'll get a 200 OK response.\n\nOtherwise, the request will fail with a 400 error, and a response listing the failed services."
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: up
                  services: { database: up, redis: up }
                properties:
                  status: { type: string, example: up, description: 'The status of this API (`up` or `down`).' }
                  services: { type: object, example: { database: up, redis: up }, description: 'Map of each downstream service and their status (`up` or `down`).' }
        400:
          description: '400, Service is unhealthy'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: down
                  services: { database: up, redis: down }
                properties:
                  status: { type: string, example: down, description: 'The status of this API (`up` or `down`).' }
                  services: { type: object, example: { database: up, redis: down }, description: 'Map of each downstream service and their status (`up` or `down`).' }
      tags:
        - General
      security: []
  /api/side_projects:
    get:
      summary: 'View all side projects'
      description: "This endpoint's response was gotten via a \"response call\"â€”\nScribe called our API in a test environment to get a sample response."
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  - { id: 1, name: 'voluptas assumenda maiores', description: 'Consequuntur aut ea est non.', url: null, due_at: '20310222', created_at: '2021-05-30T00:21:59.000000Z', updated_at: '2021-05-30T00:21:59.000000Z', user_id: '2' }
                  - { id: 2, name: 'iusto ut dolor', description: 'Voluptatem aspernatur dolorem quae quaerat harum.', url: null, due_at: '20301215', created_at: '2021-05-30T00:21:59.000000Z', updated_at: '2021-05-30T00:21:59.000000Z', user_id: '1' }
                  - { id: 3, name: 'provident et consequatur', description: 'Quos et ipsum cum pariatur ex perspiciatis eius.', url: null, due_at: '20231022', created_at: '2021-05-30T00:23:25.000000Z', updated_at: '2021-05-30T00:23:25.000000Z', user_id: '3' }
                  - { id: 4, name: 'corporis consequuntur amet', description: 'Dolores eveniet deleniti voluptatem saepe expedita.', url: null, due_at: '20230712', created_at: '2021-05-30T00:23:25.000000Z', updated_at: '2021-05-30T00:23:25.000000Z', user_id: '1' }
                  - { id: 5, name: 'optio excepturi ea', description: 'Error deleniti sint a nostrum consequuntur et.', url: null, due_at: '20260324', created_at: '2021-05-30T00:24:27.000000Z', updated_at: '2021-05-30T00:24:27.000000Z', user_id: '4' }
                  - { id: 6, name: 'nihil voluptate quaerat', description: 'Animi reprehenderit soluta id quo.', url: null, due_at: '20290603', created_at: '2021-05-30T00:24:27.000000Z', updated_at: '2021-05-30T00:24:27.000000Z', user_id: '1' }
                  - { id: 7, name: 'aspernatur architecto assumenda', description: 'Nisi ea aut vel sint vero voluptas tempore.', url: null, due_at: '20280710', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '5' }
                  - { id: 8, name: 'vel perspiciatis quo', description: 'Et qui praesentium consequatur distinctio natus.', url: null, due_at: '20210605', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '1' }
                  - { id: 9, name: 'qui et totam', description: 'Veritatis quo dolorum soluta ut.', url: null, due_at: '20270203', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '1' }
      tags:
        - 'Side Projects'
      security: []
    post:
      summary: 'Start a new side project'
      description: "_Even though we both know you'll never finish it._\n\nThis endpoint's body parameters were automatically generated by Scribe\nfrom the controller's code. Check out the source! </aside>"
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Side Projects'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of your side project. Must not be greater than 80 characters.'
                  example: '"The SideProject API"'
                description:
                  type: string
                  description: 'A longer description of your side project. Must not be greater than 255 characters.'
                  example: pgqjigojmheiufuugyeraqcamzgjbqbfqbumnhjkamvcyqyjembuczzfvpzmyjfwqbejzuccxjojnmmnudzldufmhxtgjwzjehxpzsjczlumelaxizdfjh
                url:
                  type: string
                  description: 'A url to your side project. Must be a valid URL.'
                  example: 'http://heaney.info/officia-ducimus-ratione-quisquam-ut-ad-nulla-doloremque'
                due_at:
                  type: string
                  description: 'Due date for the side project. Must be a valid date. Must be a valid date in the format <code>Ymd</code>. Must be a date after <code>today</code>.'
                  example: '2038-07-30'
              required:
                - name
  '/api/side_projects/{id}':
    get:
      summary: 'View a side project'
      description: "This endpoint's response uses a Fractal transformer, so we tell Scribe that using an annotation,\nand it figures out how to generate a sample. The 404 sample is gotten from a \"response file\".\n\n<aside class=\"success\">Also, pretty cool: this endpoint's (and many others') URL parameters were figured out entirely by Scribe!</aside>"
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: { name: 'quia culpa quo', description: 'Qui est maiores nulla perferendis aliquam.', due_date: '20230214', owner: { id: 1, name: Pete, email: pete@home.com, email_verified_at: null, created_at: '2021-05-29T22:53:05.000000Z', updated_at: '2021-05-29T22:53:05.000000Z' } }
                properties:
                  data: { type: object, example: { name: 'quia culpa quo', description: 'Qui est maiores nulla perferendis aliquam.', due_date: '20230214', owner: { id: 1, name: Pete, email: pete@home.com, email_verified_at: null, created_at: '2021-05-29T22:53:05.000000Z', updated_at: '2021-05-29T22:53:05.000000Z' } } }
      tags:
        - 'Side Projects'
      security: []
    put:
      summary: 'Update a side project'
      description: ''
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Side Projects'
      security: []
    delete:
      summary: 'Delete a side project'
      description: ''
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Side Projects'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the side project.'
        example: 7
        required: true
        schema:
          type: integer
  /api/users:
    post:
      summary: 'Create a user'
      description: 'This endpoint''s body parameters are automatically generated from a FormRequest.'
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 1 characters. Must not be greater than 255 characters.'
                  example: bunnfbbngqakqsbubcxdhjxlmfotfeuxyaiiqegvmawtqwmbxlysklhkwzbrodbxcbjmxrqifnupynzlewpelcjvddycjyyfjhqwguarckqlqyagmtkxhaukyczsmlbuqovyhyheegoevpqiasuegwoerrqfjlilzimjvzqotrdabocpprqashifyrscszpnciuxqmgpiizqirmbtqqy
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: hodkiewicz.hosea@example.net
                password:
                  type: string
                  description: ''
                  example: voluptatem
              required:
                - name
                - email
                - password
      security: []
    get:
      summary: 'View all users'
      description: "This endpoint uses a custom Scribe strategy that parses a\n`@usesPagination` annotation to add some query parameters.\n\nThe sample response is gotten by Scribe making a test API call (aka \"response call\")."
      parameters:
        -
          in: query
          name: page
          description: 'Page number to return.'
          example: 1
          required: false
          schema:
            type: string
            description: 'Page number to return.'
            example: 1
        -
          in: query
          name: pageSize
          description: 'Number of items to return in a page. Defaults to 10.'
          example: null
          required: false
          schema:
            type: string
            description: 'Number of items to return in a page. Defaults to 10.'
            example: null
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: [{ id: 1, name: Pete, email: pete@home.com, side_projects: [{ id: 2, name: 'iusto ut dolor', description: 'Voluptatem aspernatur dolorem quae quaerat harum.', url: null, due_at: '20301215', created_at: '2021-05-30T00:21:59.000000Z', updated_at: '2021-05-30T00:21:59.000000Z', user_id: '1' }, { id: 4, name: 'corporis consequuntur amet', description: 'Dolores eveniet deleniti voluptatem saepe expedita.', url: null, due_at: '20230712', created_at: '2021-05-30T00:23:25.000000Z', updated_at: '2021-05-30T00:23:25.000000Z', user_id: '1' }, { id: 6, name: 'nihil voluptate quaerat', description: 'Animi reprehenderit soluta id quo.', url: null, due_at: '20290603', created_at: '2021-05-30T00:24:27.000000Z', updated_at: '2021-05-30T00:24:27.000000Z', user_id: '1' }, { id: 8, name: 'vel perspiciatis quo', description: 'Et qui praesentium consequatur distinctio natus.', url: null, due_at: '20210605', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '1' }, { id: 9, name: 'qui et totam', description: 'Veritatis quo dolorum soluta ut.', url: null, due_at: '20270203', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '1' }] }, { id: 2, name: 'Alexane Weber', email: lacy.wintheiser@example.net, side_projects: [{ id: 1, name: 'voluptas assumenda maiores', description: 'Consequuntur aut ea est non.', url: null, due_at: '20310222', created_at: '2021-05-30T00:21:59.000000Z', updated_at: '2021-05-30T00:21:59.000000Z', user_id: '2' }] }, { id: 3, name: 'John Kshlerin II', email: titus77@example.com, side_projects: [{ id: 3, name: 'provident et consequatur', description: 'Quos et ipsum cum pariatur ex perspiciatis eius.', url: null, due_at: '20231022', created_at: '2021-05-30T00:23:25.000000Z', updated_at: '2021-05-30T00:23:25.000000Z', user_id: '3' }] }, { id: 4, name: 'Rebeca Morissette', email: cole.geoffrey@example.com, side_projects: [{ id: 5, name: 'optio excepturi ea', description: 'Error deleniti sint a nostrum consequuntur et.', url: null, due_at: '20260324', created_at: '2021-05-30T00:24:27.000000Z', updated_at: '2021-05-30T00:24:27.000000Z', user_id: '4' }] }, { id: 5, name: 'Prof. Adah Witting IV', email: nswift@example.net, side_projects: [{ id: 7, name: 'aspernatur architecto assumenda', description: 'Nisi ea aut vel sint vero voluptas tempore.', url: null, due_at: '20280710', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '5' }] }]
                properties:
                  data: { type: array, example: [{ id: 1, name: Pete, email: pete@home.com, side_projects: [{ id: 2, name: 'iusto ut dolor', description: 'Voluptatem aspernatur dolorem quae quaerat harum.', url: null, due_at: '20301215', created_at: '2021-05-30T00:21:59.000000Z', updated_at: '2021-05-30T00:21:59.000000Z', user_id: '1' }, { id: 4, name: 'corporis consequuntur amet', description: 'Dolores eveniet deleniti voluptatem saepe expedita.', url: null, due_at: '20230712', created_at: '2021-05-30T00:23:25.000000Z', updated_at: '2021-05-30T00:23:25.000000Z', user_id: '1' }, { id: 6, name: 'nihil voluptate quaerat', description: 'Animi reprehenderit soluta id quo.', url: null, due_at: '20290603', created_at: '2021-05-30T00:24:27.000000Z', updated_at: '2021-05-30T00:24:27.000000Z', user_id: '1' }, { id: 8, name: 'vel perspiciatis quo', description: 'Et qui praesentium consequatur distinctio natus.', url: null, due_at: '20210605', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '1' }, { id: 9, name: 'qui et totam', description: 'Veritatis quo dolorum soluta ut.', url: null, due_at: '20270203', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '1' }] }, { id: 2, name: 'Alexane Weber', email: lacy.wintheiser@example.net, side_projects: [{ id: 1, name: 'voluptas assumenda maiores', description: 'Consequuntur aut ea est non.', url: null, due_at: '20310222', created_at: '2021-05-30T00:21:59.000000Z', updated_at: '2021-05-30T00:21:59.000000Z', user_id: '2' }] }, { id: 3, name: 'John Kshlerin II', email: titus77@example.com, side_projects: [{ id: 3, name: 'provident et consequatur', description: 'Quos et ipsum cum pariatur ex perspiciatis eius.', url: null, due_at: '20231022', created_at: '2021-05-30T00:23:25.000000Z', updated_at: '2021-05-30T00:23:25.000000Z', user_id: '3' }] }, { id: 4, name: 'Rebeca Morissette', email: cole.geoffrey@example.com, side_projects: [{ id: 5, name: 'optio excepturi ea', description: 'Error deleniti sint a nostrum consequuntur et.', url: null, due_at: '20260324', created_at: '2021-05-30T00:24:27.000000Z', updated_at: '2021-05-30T00:24:27.000000Z', user_id: '4' }] }, { id: 5, name: 'Prof. Adah Witting IV', email: nswift@example.net, side_projects: [{ id: 7, name: 'aspernatur architecto assumenda', description: 'Nisi ea aut vel sint vero voluptas tempore.', url: null, due_at: '20280710', created_at: '2021-05-30T00:25:43.000000Z', updated_at: '2021-05-30T00:25:43.000000Z', user_id: '5' }] }], items: { type: object } }
      tags:
        - Users
      security: []
  '/api/users/{id}':
    get:
      summary: 'Fetch a user'
      description: "This endpoint's response uses an Eloquent API resource, so we tell Scribe that using an annotation,\nand it figures out how to generate a sample. The 404 sample is gotten from a \"response file\"."
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: { id: 6, name: 'Dr. Hayley Lueilwitz V', email: donato96@example.net, side_projects: [{ id: 10, name: 'dolorem rerum impedit', description: 'Excepturi quis id blanditiis culpa facilis error error.', url: null, due_at: '20301016', created_at: '2021-05-31T16:38:20.000000Z', updated_at: '2021-05-31T16:38:20.000000Z', user_id: '6' }] }
                properties:
                  data: { type: object, example: { id: 6, name: 'Dr. Hayley Lueilwitz V', email: donato96@example.net, side_projects: [{ id: 10, name: 'dolorem rerum impedit', description: 'Excepturi quis id blanditiis culpa facilis error error.', url: null, due_at: '20301016', created_at: '2021-05-31T16:38:20.000000Z', updated_at: '2021-05-31T16:38:20.000000Z', user_id: '6' }] } }
        404:
          description: '404, User not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not found'
                  resource: user
                properties:
                  message: { type: string, example: 'Not found' }
                  resource: { type: string, example: user }
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 20
        required: true
        schema:
          type: integer
  '/api/users/{id}/auth':
    post:
      summary: Authenticate
      description: "Get a new API token.\n\n<aside>Yes, we know you can impersonate any user.ðŸ™„</aside>"
      parameters:
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  token: 2|KLDoUXc68Ko0JaFDZoX9qYkUqWglwdGxQsvTGBCg
                properties:
                  token: { type: string, example: 2|KLDoUXc68Ko0JaFDZoX9qYkUqWglwdGxQsvTGBCg, description: 'The new API token. Valid forever.' }
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 20
        required: true
        schema:
          type: integer
